
Possible other features:
 * Can detect if multiple windows are being viewed even if just one is in focus
 * Detect that window is opened in second monitor and is being read from
 * Informative analysis: you have short attention span/you quickly visit time wasters/time using this has increased
 * Detect idling
 * User identified time wasters vs work

User interface:
 * Can choose a schedule for service to run, or can click to start/stop timing for the day,
   or can start at system startup
 * Can click programs to disable from tracking
 * Can create a list of programs to track for the session
 * Choose time period to show, Day, Week, Month
 * Should not be realtime in GUI (timers ticking up etc), just snapshop when opened
   and when gains focus (maybe not focus could be confusin g)


Gotchas:
 * Procrastitracker source says win 8/10 hide real process in a wrapper
   https://github.com/aardappel/procrastitracker/blob/master/src/timercallback.h
     - Can solve this by tracking process status and be notified when closed
 * .exes with the same name, give same record
 * Closing programs (without switching to new program)
 * Shutdown and sleep
 * Messaging other process when it isn't open

Time management:
 * Could just use time of day (day starts at 12:00 am) but ignores late night users (would include previous 'day' in current day)
 * So can try to track when shutdowns occur, or when they go to sleep. Have to consider, people who don't shutdown PC, and if app
   isn't run for a few days
 * Can set a date collection daily schedule by checking time then starting collection (assuming program is running)
     - Doesn't need to use windows scheduler


Single .exe, single user program, single process

* When app started from icon/shortcut opens gui
* When 'x' pressed just closes gui but leaves program running (can see in tray)
* If icon pressed again reopens GUI, but knows program was already open (TODO: Not sure how)
* Tray icon allows you to quit or open GUI etc
* Can terminate program in GUI menu too
* All this is configurable (can disallow running as 'backround' program), so 'x' closes program
* If instance running and normal icon is pressed it will not open another process and will instead
  just maximise a GUI

Implementation
* Has a database file that read/writes at startup/shutdown and at autosave interval
* Keeps all other state temporarily in memory


 Problems
 1. Not sure if can run from startup without GUI this way, or start with a kind of scheduler
	- Maybe just put in startup folder with flag in shortcut
 2. May not make it appear program closed properly, if gui is just hidden

//---
Foreground polling:
 * SetWinEventHook can be slow, have to inject dll into address of processes you want to monitor
   could test against polling foreground window later.
 * System wide hooks can be slow, have to inject dll into all processes
	
Time of day:
 * I think local time is fine, as it only runs on one machine and doesn't
   communicate with other machines.
 * Don't handle changing local time yet (daylight davings or move to new timezone)
 * tm_dst can tell if daylight savings

Settings:
 * User
     - Blacklist program names
UI:
 * Could make horizontal graphs, with layout similar like win10 task manager processes screen






Similar apps:
Acitvity Watch
https://activitywatch.net/

Procrastitracker
http://strlen.com/procrastitracker/#download
